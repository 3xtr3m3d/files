@version:3.0

options {
	# disable the chained hostname format in logs
	chain_hostnames(off);

	# the time to wait before a died connection is re-established
	time_reopen (600);

	# the time to wait before an idle destination file is closed
	time_reap(0);

	# the number of lines buffered before written to file
	# you might want to increase this if your disk isn't catching with
	# all the log messages you get or if you want less disk activity
	# (say on a laptop)
	flush_lines(0);

	# the number of lines fitting in the output queue
	log_fifo_size(256);

	# enable or disable directory creation for destination files
	create_dirs(no);

	# default owner, group, and permissions for log files
	owner(root);
	perm(0600);
	#group("log");

	# default owner, group, and permissions for created directories
	#dir_owner(root);
	#dir_group(root);
	#dir_perm(0755);

	# enable or disable DNS usage
	# syslog-ng blocks on DNS queries, so enabling DNS may lead to
	# a Denial of Service attack
	use_dns(no);

	# maximum length of message in bytes
	# this is only limited by the program listening on the /dev/log Unix
	# socket, glibc can handle arbitrary length log messages, but -- for
	# example -- syslogd accepts only 1024 bytes
	log_msg_size(1024);

	# Disable statistic log messages.
	stats_freq(0);

	# "--MARK--" entries in the log
	mark_freq (3600);

	keep_hostname(yes);
	use_fqdn(no);
	long_hostnames(off);
#	ts_format(iso);      #make ISO-8601 timestamps
};


source s_all {
	# message generated by Syslog-NG
	internal();
	# standard Linux log source (this is the default place for the syslog() function to send logs to)
	unix-stream("/dev/log");
	# messages from the kernel
	file("/proc/kmsg" program_override("kernel"));
};

source s_localhost {
	tcp(ip(127.0.0.1) port(514));
	udp(ip(127.0.0.1) port(514));
};

#source s_messages {
#	file("/var/log/messages");
#};

destination d_messages {
	file("/var/log/messages");
};

destination d_network {
#	tcp( "192.168.1.150" port(514) );
	tcp( "192.168.1.150" port(514)
		tls( ca_dir("/etc/syslog-ng.cert")
			key_file("/etc/syslog-ng.cert/client_192.168.1.1.key")
			cert_file("/etc/syslog-ng.cert/client_192.168.1.1.crt")
#			peer_verify(optional-untrusted)
			peer_verify(required-trusted)
			)
		);
};


log {
	source(s_all);
	source(s_localhost);
#	source(s_messages);
	destination(d_messages);
	destination(d_network);
};
