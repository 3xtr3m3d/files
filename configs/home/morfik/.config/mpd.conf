#
# /etc/mpd.conf or ~/.config/mpd/mpd.conf 
#
# Lines beginning with a "#" character are comments. All other non-empty lines specify parameters
# and their values. These lines contain the parameter name and parameter value (surrounded by
# double quotes) separated by whitespace (either tabs or spaces). Parameters that take a file or
# directory as an argument should use absolute paths.
#
# Read the user manual for documentation: http://www.musicpd.org/doc/user/ or
# /usr/share/doc/mpd/user-manual.html


# Files and directories ###########################################################################
#
# This setting controls the top directory which MPD will search to discover the available audio
# files and add them to the daemon's online database. This  setting defaults to the XDG directory,
# otherwise the music directory will be be disabled and audio files will only be accepted over ipc
# socket (using file:// protocol) or streaming files over an accepted protocol.
#
#music_directory                    "/var/lib/mpd/music"
music_directory                     "/media/Kabi/mp3"
#
# This setting sets the MPD internal playlist directory. The purpose of this directory is storage
# for playlists created by MPD. The server will use playlist files not created by the server but
# only if they are in the MPD format. This setting defaults to playlist saving being disabled.
#
#playlist_directory                 "/var/lib/mpd/playlists"
playlist_directory                  "~/.config/mpd/playlists"
#
# This setting sets the location of the MPD database. This file is used to load the database at
# server start up and store the database while the server is not up. This setting defaults to
# disabled which will allow MPD to accept files over ipc socket (using file:// protocol) or
# streaming files over an accepted protocol.
#
#db_file                            "/var/lib/mpd/tag_cache"
db_file                             "~/.config/mpd/tag_cache"
# 
# These settings are the locations for the daemon log files for the daemon. These logs are great
# for troubleshooting, depending on your log_level settings.
#
# The special value "syslog" makes MPD use the local syslog daemon. This
# setting defaults to logging to syslog, otherwise logging is disabled.
#
#log_file                           "/var/log/mpd/mpd.log"
log_file                            "~/.config/mpd/mpd.log"
#
# This setting sets the location of the file which stores the process ID for use of "mpd --kill"
# and some init scripts. This setting is disabled by default and the pid file will not be stored.
#
#pid_file                           "/run/mpd/pid"
pid_file                            "~/.config/mpd/pid"
#
# This setting sets the location of the file which contains information about most variables to get
# MPD back into the same general shape it was in before it was brought down. This setting is
# disabled by default and the server state will be reset on server start up.
#
#state_file                         "/var/lib/mpd/state"
state_file                          "~/.config/mpd/state"
#
# The location of the sticker database.  This is a database which manages dynamic information
# attached to songs.
#
#sticker_file                       "/var/lib/mpd/sticker.sql"
sticker_file                        "~/.config/mpd/sticker.sql"
#
###################################################################################################


# General music daemon options ####################################################################
#
# This specifies the user that MPD will run as, if set. MPD should never run as root, and you may
# use this option to make MPD change its user id after initialization. Do not use this option if
# you start MPD as an unprivileged user. This setting is disabled by default and MPD is run as the
# current user.
#
#user                               "mpd"
#user                               "nobody"
#
# This setting specifies the group that MPD will run as. If not specified primary group of user
# specified with "user" setting will be used (if set). This is useful if MPD needs to be a member
# of group such as "audio" to have permission to use sound card.
#
#group                              "nogroup"
#

# This specifies which address mpd binds to and listens on. Multiple bind_to_address parameters may
# be specified. The default is "any", which binds to all available addresses. You can set a port
# that is different from the global port setting, e.g. "localhost:6602".  IPv6 addresses must be
# enclosed in square brackets if you want to configure a port, e.g. "[::1]:6602". To  bind to a
# Unix domain socket, specify an absolute path or a path starting with a tilde (~). For a
# system-wide MPD, we suggest the path "/var/run/mpd/socket". Careful attention should be paid if
# this is assigned to anything other then the default. This setting can deny access to control of
# the daemon. Not effective if systemd socket activation is in use.
#
# For network
bind_to_address                     "localhost"
#bind_to_address                    "any"
#
# And for Unix Socket
#bind_to_address                    "/run/mpd/socket"
#bind_to_address                    "~/.mpd/socket"
#
# This setting is the TCP port that is desired for the daemon to get assigned to. The default is
# 6600.
#
port                                "6600"
#
# This specifies how verbose logs are. Available setting arguments are "default", "secure" or
# "verbose". "default" is minimal logging, "secure" reports from what address a connection is
# opened, and when it is closed, and "verbose" records excessive amounts of information for
# debugging purposes and can quickly stretch available resources on limited hardware storage. The
# default is "default".
log_level                           "default"
#
# If you have a problem with your MP3s ending abruptly, it is recommended that you set this
# argument to "no" to attempt to fix the problem. This specifies whether to support gapless
# playback of MP3s which have the necessary headers. Useful if your MP3s have headers with
# incorrect information. If you have such MP3s, it is highly recommended that you fix them using
# vbrfix (available as vbrfix in the debian archive) instead of disabling gapless MP3 playback. The
# default is to support gapless MP3 playback.
#
#gapless_mp3_playback               "yes"
#
# Setting "restore_paused" to "yes" puts MPD into pause mode instead of starting playback after
# startup.
#
restore_paused                      "yes"
#
# This specifies whether relative or absolute paths for song filenames are used when saving
# playlists. This setting enables MPD to create playlists in a format usable by other music players.
# The default is "no".
save_absolute_paths_in_playlists    "yes"
#
# This specifies the tag types that will be scanned for and made available to clients. Note that
# you must recreate (not update) your database for changes to this parameter to take effect.
# Possible values are artist, album,  title, track, name, genre, date, composer, performer, comment,
# disc, musicbrainz_artistid, musicbrainz_albumid,  musicbrainz_albumartistid,
# musicbrainz_releasetrackid, musicbrainz_trackid. Multiple tags may be specified as a comma
# separated list. An example value is "artist,album,title,track". The special value "none" may be
# used alone to disable all metadata. The default is to use all known tag types except for comments
# and those starting with "musicbrainz".
metadata_to_use "artist,album,title,track,name,genre,date,composer,performer,disc"
#
# This specifies whether to support automatic update of music database when files are changed in
# music_directory. The default is to disable autoupdate of database.
#
auto_update                         "yes"
#
# Limit the depth of the directories being watched. 0 means only watch the music directory itself.
# There is no limit by default.
#
auto_update_depth                   "5"
#
###################################################################################################


# Symbolic link behavior ##########################################################################
#
# Control if MPD will follow symbolic links pointing outside the music dir. You must recreate the
# database after changing this option. The default is "yes".
#
follow_outside_symlinks            "no"
#
# Control if MPD will follow symbolic links pointing inside the music dir, potentially adding
# duplicates to the database. You must recreate the database after changing this option. The
# default is "yes".
#
follow_inside_symlinks             "no"
#
###################################################################################################


# Zeroconf / Avahi Service Discovery ##############################################################
#
# If yes, and MPD has been compiled with support for Avahi or Bonjour, service information will be
# published with Zeroconf. The default is "yes".
#
#zeroconf_enabled                   "yes"
#
# If Zeroconf is  enabled, this is the service name to publish. This name should be unique to your
# local network, but name collisions will be properly dealt with. The default is "Music Player".
#
#zeroconf_name                      "Music Player"
#
###################################################################################################


# Permissions #####################################################################################
#
# This specifies a password for access to mpd. The format is "password@permissions" where
# permissions is a comma delimited list composed of "read", "add", "control", and/or "admin".
#  "read" allows for reading of the database, displaying the current playlist, and current status
#           of mpd.
#  "add" allows for adding songs and loading playlists.
#  "control" allows for all other player and playlist manipulations.
#  "admin" allows the db to be updated and for the client to kill mpd.
#
# An example value is "somePassword@read,add". Multiple password parameters may be specified.
#
#password                           "password@read,add,control,admin"
#
# This specifies the permissions of a client that has not been authenticated using a password. The
# format of permissions is specified in the description of the "password" config parameter. If no
# passwords are specified, the default is "read,add,control,admin", otherwise it is "" (no
# permissions).
#
#default_permissions                "read,add,control,admin"
#
###################################################################################################


# Database ########################################################################################
#

#database {
#   plugin "proxy"
#   host "other.mpd.host"
#   port "6600"
#}

# Input ###########################################################################################
#

input {
    plugin "curl"
#   proxy "proxy.isp.com:8080"
#   proxy_user "user"
#   proxy_password "password"
}

#
###################################################################################################


# Audio Output ####################################################################################
#
# MPD supports various audio output types, as well as playing through multiple audio outputs at the
# same time, through multiple audio_output settings blocks. Setting this block is optional, though
# the server will only attempt autodetection for one sound card.
#
# "type" specifies the audio output type. See the list of supported outputs in "mpd --version"
#   for possible values.
# "name" specifies a unique name for the audio output.
# "format" specifies the sample rate, bits per sample, and number of channels of audio that is sent
#   to the audio output device. See documentation for the audio_output_format parameter for more
#   details. The default is to use whatever audio format is passed to the audio output. Any of the
#   three attributes may be an asterisk to specify that this attribute should not be enforced.
# "replay_gain_handler" specifies how replay gain is applied. The default is "software", which uses
#   an internal software volume control. "mixer" uses the configured (hardware) mixer control.
#   "none" disables replay gain on this audio output.
# "device" specifies the device to use for audio output.  The default is "default".
# "mixer_type" specifies which mixer should be used for this audio output: the hardware mixer
#   (available for ALSA, OSS and PulseAudio), the software mixer or no mixer ("none"). By default,
#   the hardware mixer is used for devices which support it, and none for the others.
# "mixer_device" specifies which mixer to use. The default is "default". To use the second sound
#   card in a system, use "hw:1".
# "mixer_control" specifies which mixer control to use (sometimes referred to as the "device"). The
#   default is "PCM".  Use "amixer scontrols" to see the list of possible controls.
# "mixer_index" specifies a number identifying the index of the named mixer control. This is
#   probably only useful if your alsa device has more than one identically-named mixer control. The
#   default is "0". Use "amixer scontrols" to see the list of controls with their indexes.
# "use_mmap" allows you to use memory-mapped I/O. Certain hardware setups may benefit from this,
#   but most do not. Most users do not need to set this. The default is to not use memory-mapped
#   I/O.
# "auto_resample" lets MPD do the resampling. Setting this to "no" disables ALSA's software
#   resampling, if the hardware does not support a specific sample rate. "yes" is the default and
#   allows ALSA to resample.
# "auto_channels" disables ALSA's channel conversion, if the hardware does not support a specific
#   number of channels when set to "no". Defaults to "yes".
# "auto_format" disables ALSA's sample format conversion, if the hardware does not support a
#   specific sample format when set to "no".  Defaults to "yes".
# "buffer_time" sets the length of the hardware sample buffer in microseconds. Increasing it may
#   help to reduce or eliminate skipping on certain setups. Most users do not need to change this.
#   The default is 500000  microseconds (0.5 seconds).
# "period_time" sets the time between hardware sample transfers in microseconds. Increasing this
#   can reduce CPU usage while lowering it can reduce underrun errors on bandwidth-limited devices.
#   Some users have reported good results with this set to 50000, but not all devices support
#   values this high. Most users do not need tochange this. The default is 256000000/sample_rate
#   (kHz), or 5804 microseconds for CD-quality audio.
#
# An example of a pulseaudio output (streaming to a remote pulseaudio server) Please see
# README.Debian if you want mpd to play through the pulseaudio daemon started as part of your
# graphical desktop session!
#
audio_output {
    type        "pulse"
    name        "My Pulse Output"
#   server      "remote_server"	        # optional
#   sink        "remote_server_sink"    # optional
}
#
# An example of an ALSA output:
#
audio_output {
    type        "alsa"
    name        "My ALSA Device"
#   device      "hw:0,0"            # optional
#   format      "44100:16:2"        # optional
#   mixer_type      "hardware"      # optional
#   mixer_device    "default"       # optional
#   mixer_control   "PCM"           # optional
#   mixer_index	"0"                 # optional
}
#
# An example of an OSS output:
#
#audio_output {
#   type            "oss"
#   name            "My OSS Device"
#   device          "/dev/dsp"      # optional
#   mixer_type      "hardware"      # optional
#   mixer_device    "/dev/mixer"    # optional
#   mixer_control   "PCM"           # optional
#}
#
# An example of a shout output (for streaming to Icecast):
#
#audio_output {
#   type        "shout"
#   encoding    "ogg"               # optional
#   name        "My Shout Stream"
#   host        "localhost"
#   port        "8000"
#   mount       "/mpd.ogg"
#   password    "hackme"
#   quality     "5.0"
#   bitrate     "128"
#   format      "44100:16:1"
#   protocol    "icecast2"          # optional
#   user        "source"            # optional
#   description "My Stream Description" # optional
#   url         "http://example.com"    # optional
#   genre       "jazz"              # optional
#   public      "no"                # optional
#   timeout     "2"                 # optional
#   mixer_type  "software"          # optional
#}
#
# An example of a recorder output:
#
#audio_output {
#   type        "recorder"
#   name        "My recorder"
#   encoder     "vorbis"            # optional, vorbis or lame
#   path        "/var/lib/mpd/recorder/mpd.ogg"
#   quality     "5.0"               # do not define if bitrate is defined
#   bitrate     "128"               # do not define if quality is defined
#   format      "44100:16:1"
#}
#
# An example of a httpd output (built-in HTTP streaming server):
#
#audio_output {
#   type        "httpd"
#   name        "My HTTP Stream"
#   encoder     "vorbis"            # optional, vorbis or lame
#   port        "8000"
#   bind_to_address "0.0.0.0"       # optional, IPv4 or IPv6
#   quality     "5.0"               # do not define if bitrate is defined
#   bitrate     "128"               # do not define if quality is defined
#   format      "44100:16:1"
#   max_clients "0"                 # optional 0=no limit
#}
#
# An example of a winmm output (Windows multimedia API).
#
#audio_output {
#   type        "winmm"
#   name        "My WinMM output"
#   device      "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#       or
#   device      "0"                 # optional
#   mixer_type  "hardware"          # optional
#}
#
# An example of an openal output.
#
#audio_output {
#   type        "openal"
#   name        "My OpenAL output"
#   device      "Digital Audio (S/PDIF) (High Definition Audio Device)"     # optional
#}
#
# Example "pipe" output:
#
#audio_output {
#   type        "pipe"
#   name        "my pipe"
#   command     "aplay -f cd 2>/dev/null"
# Or if you're want to use AudioCompress
#   command     "AudioCompress -m | aplay -f cd 2>/dev/null"
# Or to send raw PCM stream through PCM:
#   command     "nc example.org 8765"
#   format      "44100:16:2"
#}
#
# An example of a null output (for no audio output):
#
#audio_output {
#   type        "null"
#   name        "My Null Output"
#   mixer_type  "none"              # optional
#}
#
# If MPD has been compiled with libsamplerate support, this setting specifies the sample rate
# converter to use.  Possible values can be found in the mpd.conf man page or the libsamplerate
# documentation. By default, this is setting is disabled.
#
#samplerate_converter               "Fastest Sinc Interpolator"
#
###################################################################################################


# Normalization automatic volume adjustments ######################################################
#
# If specified, mpd will adjust the volume of songs played using ReplayGain tags (see
# <http://www.replaygain.org/>). Setting this to "album" will adjust volume using the album's
# ReplayGain tags, while setting it to  "track" will adjust it using the track ReplayGain tags.
# "auto" uses the track ReplayGain tags if random play is activated otherwise the album ReplayGain
# tags. Currently only FLAC, Ogg Vorbis,  Musepack, and MP3 (through ID3v2 ReplayGain tags, not
# APEv2) are supported. This setting is disabled by default.
#
#replaygain                         "album"
#
# This is the gain (in dB, -15,+15) applied to songs with ReplayGain tags. By default this setting
# is disabled.
#
#replaygain_preamp                  "0"
#
# This setting sets the pre-amp used for files that do NOT have ReplayGain tags. By default this
# setting is disabled.
#
#replaygain_missing_preamp          "0"
#
# This setting enables or disables ReplayGain limiting. MPD calculates actual amplification based
# on the ReplayGain tags and replaygain_preamp / replaygain_missing_preamp setting. If
# replaygain_limit is enabled MPD will never amplify audio signal above its original level. If
# replaygain_limit is disabled such amplification might occur. By default this setting is enabled.
#
#replaygain_limit                   "yes"
#
# This setting enables on-the-fly normalization volume adjustment. This will result in the volume
# of all playing audio to be adjusted so the output has equal "loudness". This setting is disabled
# by default.
#
#volume_normalization               "no"
#
###################################################################################################


# Character Encoding ##############################################################################
#
# This specifies the character set used for the filesystem. A list of supported character sets can
# be obtained by running "iconv -l".  The default is determined from the locale when the db was
# originally created.
#
filesystem_charset                  "UTF-8"
#
# This specifies the character set which ID3v1 tags are encoded in. A list of supported character
# sets can be obtained by running "iconv -l". The default is to let libid3tag convert them
# (from ISO-8859-1, as the standard specifies) and do no additional conversion.
#
id3v1_encoding                      "UTF-8"
#id3v1_encoding                     "ISO-8859-1"
#
###################################################################################################


# SIDPlay decoder #################################################################################
#
# songlength_database:
# Location of your songlengths file, as distributed with the HVSC. The sidplay plugin checks this
# for matching MD5 fingerprints. See http://www.c64.org/HVSC/DOCUMENTS/Songlengths.faq
#
# default_songlength:
# This is the default playing time in seconds for songs not in the songlength database, or in case
# you're not using a database. A value of 0 means play indefinitely.
#
# filter:
# Turns the SID filter emulation on or off.
#
#decoder {
#   plugin                  "sidplay"
#   songlength_database     "/media/C64Music/DOCUMENTS/Songlengths.txt"
#   default_songlength      "120"
#   filter "true"
#}
#
###################################################################################################
