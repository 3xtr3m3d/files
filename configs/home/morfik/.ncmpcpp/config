#
# ~/.ncmpcpp/config
#
# Note: Configuration option values can either be enclosed in quotation marks or not. If they are
# enclosed, the leftmost and the rightmost quotation marks are treated as delimiters, therefore
# it is not necessary to escape quotation marks you use within the value itself. If they are not,
# any whitespace characters between "=" and the first printable character of the value, as well as
# whitespace characters after the last printable character of the value are trimmed. Therefore the
# rule of thumb is: if you need whitespaces at the beginning or at the end of the value, enclose
# it in quotation marks. Otherwise, don't.
# Note: COLOR has to be the name (not a number) of one of colors 1-8 from SONG FORMAT section.
#

# Directory for storing ncmpcpp related files. Changing it is useful if you want to store
# everything somewhere else and provide command line setting for alternative location to config
# file which defines that while launching ncmpcpp.
ncmpcpp_directory = ~/.ncmpcpp

# Directory for storing downloaded lyrics. It defaults to ~/.lyrics since other MPD clients (eg.
# ncmpc) also use that location.
lyrics_directory = ~/.ncmpcpp/.lyrics

# Connect to MPD running on specified host/unix socket. When HOST starts with a '/', it is assumed
# to be a unix socket.
mpd_host = localhost

# Connect to MPD on the specified port.
mpd_port = 6600

# Set connection timeout to MPD to given value.
mpd_connection_timeout = 5

# Search for files in specified directory. This is needed for tag editor to work.
mpd_music_dir = "/media/Kabi/mp3"

# Default number of seconds to crossfade, if enabled by ncmpcpp.
mpd_crossfade_time = 5

# Path to mpd fifo output. This is needed to make music visualizer work (note that output sound
# format of this fifo has to be either 44100:16:1 or 44100:16:2, depending on whether you want mono
# or stereo visualization). Example configuration (it has to be put into mpd.conf):
#
# audio_output {
#        type            "fifo"
#        name            "Visualizer feed"
#        path            "/tmp/mpd.fifo"
#        format          "44100:16:2"
# }
#
#visualizer_fifo_path = /tmp/mpd.fifo

# Below parameter is needed for ncmpcpp to determine which output provides data for visualizer and
# thus allow syncing between visualization and sound as currently there are some problems with it.
#visualizer_output_name = Visualizer feed

# Should be set to "yes", if fifo output's format was set to 44100:16:2.
#visualizer_in_stereo = yes

# Multiply received samples by given value. Very useful for proper visualization of quiet music.
#visualizer_sample_multiplier = 1

# How often ncmpcpp has to "synchronize" visualizer and audio outputs. 30 seconds is optimal value,
# but if you experience synchronization problems, set it to lower value. Keep in mind that sane
# values start with >=10.
#visualizer_sync_interval = 30

# Defines default visualizer type (spectrum is available only if ncmpcpp was compiled with fftw
# support). Available values: spectrum, wave.
visualizer_type = wave

# Defines visualizer's look (string has to be exactly 2 characters long: first one is for wave 
# whereas second for frequency spectrum).
visualizer_look = ●▮

# ncmpcpp should detect your charset encoding but if it failed to do so, you can specify charset
# encoding you are using here. You can see whether your ncmpcpp build supports charset detection by
# checking output of "ncmpcpp --version". Since MPD uses UTF-8 by default, setting this option
# makes sense only if your encoding is different.
#system_encoding = ""

# Delay for highlighting playlist since the last key was pressed. If set to 0, highlighting never
# fades away.
playlist_disable_highlight_delay = 5

# Delay for displayed messages to remain visible.
message_delay_time = 5

#For song format you can use:
# %l - length
# %f - filename
# %D - directory
# %a - artist
# %A - album artist
# %t - title
# %b - album
# %y - date
# %n - track number (01/12 -> 01)
# %N - full track info (01/12 -> 01/12)
# %g - genre
# %c - composer
# %p - performer
# %d - disc
# %C - comment
# %P - priority
# $R - begin right alignment
#
# You can also put them in { } and then it will be displayed only if all requested values are
# available and/or define alternate value with { }|{ } eg. {%a - %t}|{%f} . If you want to set
# limit on maximal length of a tag, just put the appropriate number between % and character that
# defines tag type, e.g. to make album take max. 20 terminal cells, use '%20b'. Format that is
# similar to "%a - %t" (i.e. without any additional braces) is equal to "{%a - %t}", so if one of
# the tags is missing, you'll get nothing.
#
# Text can also have different color than the main window has, eg. if you want length to be green,
# write "$3%l$9". Available values:
# 0 - default window color (discards all other colors)
# 1 - black
# 2 - red
# 3 - green
# 4 - yellow
# 5 - blue
# 6 - magenta
# 7 - cyan
# 8 - white
# 9 - end of current color
#
# Colors can be nested.
song_list_format = {%a - }{%t}|{$8%f$9}$R{$3(%l)$9}
song_status_format = {{%a{ "%b"{ (%y)}} - }{%t}}|{%f}
song_library_format = {%n - }{%t}|{%f}
#tag_editor_album_format = {(%y) }%b

# Below variables are used for sorting songs in browser. The sort mode determines how songs are
# sorted, and can be used in combination with a sort format to specify a custom sorting format.
# Available values for browser_sort_mode are "name", "mtime", "format" and "noop".
#browser_sort_mode = name
#browser_sort_format = {%a - }{%t}|{%f} {(%l)}

# Below variables are for alternative version of user's interface. Their syntax supports all tags
# and colors listed above plus some extra markers used for text attributes. They are followed by
# character '$'. After that you can put:
# b - bold text
# u - underline text
# r - reverse colors
# a - use alternative character set
#
# If you don't want to use an attribute anymore, just put it again, but this time insert character
# '/' between '$' and attribute character, e.g. {$b%t$/b}|{$r%f$/r} will display bolded title tag
# or filename with reversed colors.
#alternative_header_first_line_format = $b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b
#alternative_header_second_line_format = {{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%D}
now_playing_prefix = $b
now_playing_suffix = $/b
#browser_playlist_prefix = "$2playlist$9 "
#selected_item_prefix = $6
#selected_item_suffix = $9
#modified_item_prefix = $3> $9
# Colors are not supported for below variable.
#song_window_title_format = {%a - }{%t}|{%f}

# Syntax of song columns list format is "column column etc." Syntax for each column is: (width of
# column)[column's color]{displayed tag} . Width is by default in %, if you want a column to have
# fixed size, add 'f' after the value, e.g. (10)[white]{a} will be the column that take 10% of
# screen (so the real column's width will depend on actual screen size), whereas (10f)[white]{a}
# will take 10 terminal cells, no matter how wide the screen is. Color is optional (if you want the
# default one, type []). You can give a column additional attributes by putting appropriate
# character after displayed tag character. Available attributes are:
# r - column will be right aligned
# E - if tag is empty, empty tag marker won't be displayed
#
# You can also:
# - give a column custom name by putting it after attributes, separated with character ':', e.g.
#     {lr:Length} gives you right aligned column of lengths named "Length".
# - define sequence of tags, that have to be displayed in case predecessor is empty in a way
#     similar to the one in classic song format, i.e. using '|' character, e.g. {a|c|p:Owner} 
#     creates column named "Owner" that tries to display artist tag and then composer and performer
#     if previous ones are not available.
#song_columns_list_format = (20)[]{a} (6f)[green]{NE} (50)[white]{t|f:Title} (20)[cyan]{b} (7f)[magenta]{l}
song_columns_list_format = (7f)[green]{l} (20)[cyan]{a} (6f)[]{n} (35)[]{t} (25)[red]{b} (5f)[red]{y}"

# Shell command that will be executed each time a song changes. Useful for notifications etc. It
# doesn't support song format anymore. Use "ncmpcpp --now-playing SONG_FORMAT" instead.
#execute_on_song_change = ""

# If enabled, time remaining to end of playlist will be shown after playlist's statistics.
playlist_show_remaining_time = yes

# If enabled, total/remaining playlist time displayed in statusbar will be shown using shortened
# units' names (d:h:m:s instead of days:hours:minutes:seconds).
#playlist_shorten_total_times = no

# If enabled, separators will be placed between albums.
playlist_separate_albums = yes

# Default display mode. Possible display modes: classic, columns.
playlist_display_mode = columns
browser_display_mode = classic
#search_engine_display_mode = classic
#playlist_editor_display_mode = classic

# Indicates whether custom colors of tags have to be discarded if item is selected or not.
#discard_colors_if_item_is_selected = yes

# If enabled, seek time will increment by one each second of seeking.
#incremental_seeking = yes

# Base seek time to begin with.
seek_time = 5

# Number of percents volume has to be increased/decreased by in volume_up/volume_down.
volume_change_step = 5

# Default state for autocenter mode at start.
#autocenter_mode = no

# If enabled, currently highlighted position in the list will be always centered.
#centered_cursor = no

# This variable defines the look of progressbar. Note that it has to be exactly two or three
# characters long. You can specify third character which will be used to build 'empty' part of
# progressbar.
progressbar_look = =>

# This variable defines whether progressbar should be displayed in bold or not.
progressbar_boldness = yes

# If set to "playlist", Search engine will perform searching in current MPD playlist rather than in
# music database. Available values: database, playlist.
#default_place_to_search_in = database

# Default user interface used by ncmpcpp at start. Available values: classic, alternative.
#user_interface = classic

# If enabled, there will be a 250ms delay between refreshing position in media library or playlist
# editor and fetching appropriate data from MPD. This limits data fetched from the server and is
# particularly useful if ncmpcpp is connected to a remote host.
#data_fetching_delay = yes

# Default tag type for leftmost column in media library. Available values: artist, album_artist,
# date, genre, composer, performer.
#media_library_primary_tag = artist

# If set to "wrapped", going from last found position to next will take you to the first one (same
# goes for the first position and going to previous one), otherwise no actions will be performed.
# Available values: wrapped, normal.
#default_find_mode = wrapped

# If set to "select", space will select items instead of adding them to playlist (although
# selecting by space is default and the only one action for space in Playlist).  Available values:
# add, select.
#default_space_mode = add

# Default pattern used by Tag editor's parser.
#default_tag_editor_pattern = %n - %t

# If enabled, header window will be displayed, otherwise hidden.
header_visibility = yes

# If enabled, statusbar will be displayed, otherwise hidden.
statusbar_visibility = yes

# If enabled, column titles will be displayed, otherwise hidden.
titles_visibility = yes

# If enabled, text in header window will scroll if its length is longer then actual screen width,
# otherwise it won't.
header_text_scrolling = yes

# If enabled, cyclic scrolling is used (e.g. if you press down arrow being at the end of list,
# it'll take you to the beginning
#cyclic_scrolling = no

# Number of lines that are scrolled with mouse wheel.
lines_scrolled = 5

# If enabled, lyrics will be switched at song's change to currently playing one's. This works only
# if you are viewing lyrics of item from Playlist.
follow_now_playing_lyrics = yes

#If enabled, each time song changes lyrics fetcher will be automatically run in background in
# attempt to download lyrics for currently playing song.
#fetch_lyrics_for_current_song_in_background = no

# If enabled, lyrics will be saved in song's directory, otherwise in ~/.lyrics. Note that it needs
# properly set mpd_music_dir.
#store_lyrics_in_song_dir = no

# If set to "yes", filenames generated by ncmpcpp (with tag editor, for lyrics, artists etc.) will
# not contain the following characters: \?*:|"<> - otherwise only slash (/) will not be used.
generate_win32_compatible_filenames = no

# If set to "yes", it will be possible to physically delete files and directories from the disk in
# the browser.
allow_for_physical_item_deletion = no

# If set, ncmpcpp  will try to get info from last.fm in language you set and if it fails, it will
# fall back to English. Otherwise it will use English the first time. Language has to be expressed
# as an ISO 639 alpha-2 code.
#lastfm_preferred_language = en

# If set to add_remove, pressing space on item which is already in playlist will remove it,
# otherwise add it again. Available values: add_remove, always_add.
#space_add_mode = always_add

# Trigger for displaying in local browser files and directories that begin with '.'
show_hidden_files_in_local_browser = yes

# If set to "previous", key_screen_switcher will switch between current and last used screen. If
# set to "screen1,...screenN" (a list of screens) it will switch between them in a sequence. 
# Screens available for use: help, playlist, browser, search_engine, media_library, playlist_editor,
# tag_editor, outputs, visualizer, clock.
#screen_switcher_mode = playlist, browser

# You can define startup screen for ncmpcpp by choosing screen from the list above.
startup_screen = playlist

# If you want to lock a screen, ncmpcpp asks for % of locked screen's width to be reserved before
# that and provides a default value, which is the one you can set here. Acceptable values are from
# 20 to 80.
#locked_screen_width_part = 50

# If enabled, ncmpcpp will ask for % of locked screen's width each time you want to lock a screen.
# If you disable that, it'll silently attempt to use default value.
#ask_for_locked_screen_width_part = yes

# If enabled, ncmpcpp will jump at start to now playing song if mpd is playing or paused.
#jump_to_now_playing_song_at_start = yes

# If enabled, user will be asked if he really wants to clear the playlist after pressing key
# responsible for that.
ask_before_clearing_playlists = yes

# If enabled, clock will display time in format hh:mm:ss, otherwise hh:mm.
clock_display_seconds = yes

# If enabled, volume level will be displayed in statusbar, otherwise not.
display_volume_level = yes

# If enabled, bitrate of currently playing song will be displayed in statusbar.
display_bitrate = yes

# If enabled, remaining time of currently playing song will be be displayed in statusbar instead of
# elapsed time.
display_remaining_time = yes

# Type of currently used regular expressions. Available values: none, basic, extended.
#regular_expressions = none

# If enabled, word "the" at the beginning of tags/filenames/sort format will be ignored while
# sorting items.
ignore_leading_the = no

# If enabled, fields in Search engine above "Reset" button will be blocked after successful
# searching, otherwise they won't.
#block_search_constraints_change_if_items_found = yes

# If set to "yes", mouse support will be enabled.
mouse_support = yes

# If enabled, mouse wheel will scroll the whole page of item list at a time, otherwise the number
# of lines specified by lines_scrolled variable.
mouse_list_scroll_whole_page = no

# Text that will be displayed, if requested tag is not set.
empty_tag_marker = <empty>

# Separator that is placed between tags. Also interpreted by tag editor which splits input string
# into separate tags using it.
tags_separator = " | "

# If enabled, tag editor will number tracks using format xx/yy (where xx is the current track and
# yy is total amount of all numbered tracks), not plain xx.
#tag_editor_extended_numeration = no

# If enabled, media library will be sorted by modification time. Otherwise lexicographic sorting
# is used.
media_library_sort_by_mtime = no

# If enabled, ncmpcpp will override current window title with its own one.
enable_window_title = yes

# Number of default mode used in search engine. Available modes are:
# 1 - use mpd built-in searching (no regexes, pattern matching)
# 2 - use ncmpcpp searching (pattern matching with support for regexes, but if your mpd is on a
#       remote machine, downloading big database to process it can take a while
# 3 - match only exact values (this mode uses mpd function for searching in database and local one
#       for searching in current playlist)
#search_engine_default_search_mode = 1

# Path to external editor used to edit lyrics.
external_editor = vim

# If your external editor is console application, you need to enable it.
use_console_editor = yes

# No need to describe it, huh?
colors_enabled = yes
#empty_tag_color = cyan
#header_window_color = default
#volume_color = default
#state_line_color = default
#state_flags_color = default
#main_window_color = yellow
#color1 = white
#color2 = green
#main_window_highlight_color = yellow
#progressbar_color = black
#progressbar_elapsed_color = green
#statusbar_color = default
#alternative_ui_separator_color = black
#active_column_color = red
#visualizer_color = yellow
#window_border_color = green
#active_window_border = red
